		       ==============================
			  Ng (Micro Nemacs) 入門編
		       ==============================


注意:		この入門編で実際にいろいろな操作を試してみる前に、この文書の
		バックアップを作っておく事をお勧めします。

注意:		この入門編は、「習うより慣れろ」をモットーに作成されています。
		">>" から始まる行は、その時何をすべきかを指示しています。


     Ng のコマンドを入力するときには、一般的にコントロール・キー (キー・トッ
プに、CTRL あるいは、CTL と書いてある) やメタ・キー (普通、エスケープ・キー
を使う) が使われます。そこで、CONTROL とか META とか書く代わりに、次のような
記号を使うことにします。

C-<文字>	コントロール・キーを押したまま、<文字> キーを押します。例え
		ば、C-f は、コントロール・キーを押しながら f のキーを押すこ
		とを意味します。

       >> それでは、C-v (View Next Screen; 次の画面を見る) をタイプしてみて
          下さい。次の画面に進むことができます。

ESC <文字>	エスケープ・キーを押してから離し、それから <文字> キーを押
		します。

注意:		<文字> は、大文字でも小文字でもコマンドとしては同じ意味にな
		ります。

重要です:	Ng を終了させたい時は、C-x C-c をタイプします。なお、Ng を 
		csh から起動している場合、サスペンドする (一時的に止める) 
		ことが出来ます。Ng をサスペンドするには、C-z をタイプします。


     さて、これからは、一画面分読み終えたら、C-v を入力して行って下さい。

     前の画面と次の画面とでは、表示される内容に何行文かの重なりがあります。
これは、表示されている内容が連続していることがすぐ判るようにするためです。


     まずは、ファイルの中を移動して行く方法を知る必要があります。C-v によっ
て先に進むことはもう判りました。元に戻るには、ESC v をタイプします。

      >> ESC v と C-v を使って、前後に移動することを何回か試してみなさい。

要約
====
     ファイルを画面毎に見て行くには、次のコマンドを使います。

     C-v	前に一画面分進む
     ESC v	後ろに一画面分戻る
     C-l	画面を書き直す。このとき、元カーソルのあった行が画面の中央に
		くるようにする

       >> 今カーソルがどこにあるか、その近くにどんなテキストが書かれているか
          を覚えなさい。C-l をタイプし、カーソルがどこに移動したか、その近く
          のテキストはどうなったかを調べてみなさい。

基本的なカーソルの制御
======================

     画面毎の移動はできるようになりました。今度は、画面の中で、特定の場所に
移動するための方法を憶えましょう。これにはいくつかのやり方があります。一つの
方法は、前 (previous) 次 (next) 先 (forward) 後 (backward) に移動するコマン
ドを使うことです。これらのコマンドはそれぞれ、C-p, C-n, C-f, C-b に割り当て
られており、現在の場所から新しい場所にカーソルを移動させます。図で書けば、


                               前の行，C-p
                                    :
                                    :
     後の文字，C-b   ....   現在のカーソル位置   ....   先の文字，C-f
                                    :
                                    :
                               次の行，C-n


     これらは、それぞれ、Previous, Next, Backward, Forward の頭文字になって
いるので、憶えやすいでしょう。これらは、基本的なカーソル移動コマンドであり、
いつでも使うものです。

       >> C-n を何回かタイプし、(今、あなたが読んでいる) この行までカーソル
          を移動させなさい。

       >> C-f を使って行の中ほどに移動し、C-p で何行か上に移動してみなさい。
          カーソルの位置の変化に注意しなさい。

       >> 行の先頭で C-b をタイプしてみなさい。カーソルはどこに移動しますか？
          さらにもう少し C-b をタイプし、今度は C-f で行末の方に戻りなさい。
          カーソルが行末を越えるとどうなりますか？


     画面の先頭や末尾を越えてカーソルを移動させようとすると、その方向にある
テキストが移動して来て、カーソルは常に画面内にあるようにされます。

       >> C-n を使って、カーソルを画面の下端より下に移動させてみなさい。何が
          起こりましたか？ カーソルの位置はどう変りましたか？

     一文字単位の移動ではまどろっこしいと思うなら、単語単位で移動することも
できます。ESC f で一単語分先に進み、ESC b で一単語分前に戻ります。

注意:		日本語については、単語の切れ目を認識することはできませんが、
		疑似的な文節を単語の切れ目としています。

       >> ESC f や ESC b を何回かタイプしてみなさい。C-f や C-b と併用してみ
          なさい。

     C-f や C-b に対する、ESC f や ESC b の類似性に注目しましょう。多くの場
合、ESC <文字> は文書関係の処理に使われ、一方 C-<文字> はそれよりももっと基
本的な対象 (文字とか行とか) に対する操作に使われます。

     C-a と C-e も知っていて便利なコマンドです。C-a はカーソルを行の先頭に移
動させ、C-e は行の末尾に移動させます。


       >> C-a を２回、それから C-e を２回入力してみなさい。これらのコマンド
          を２回以上繰返しても、カーソルはそれ以上移動しないことに注意。

     あと二つ、簡単なカーソル移動コマンドがあります。ファイルの先頭に移動す
る ESC < と、ファイルの末尾に移動する ESC > です。

     テキスト中でカーソルの存在する位置を「ポイント」と呼びます。言いかえれ
ば、カーソルは、テキストのどこにポイントがあるかを画面上で示しているのです。

     以下に単純な移動操作について要約します。このなかには、単語や行単位での
移動コマンドも含まれています。

     C-f	一文字先に進む
     C-b	一文字後に戻る

     ESC f	一単語先に進む
     ESC b	一単語後に戻る

     C-n	次の行に移動
     C-p	前の行に移動

     ESC ]	段落の終わりに移動
     ESC [	段落の先頭に移動

     C-a	行の最初に移動
     C-e	行の最後に移動

     ESC <	ファイルの最初に移動
     ESC >	ファイルの最後に移動

       >> 各々のコマンドを試してみなさい。これらのコマンドは、最もしばしば使
          われるものです。最後の二つでは、この場所とは離れたところに移動する
          ので、C-v や ESC v を使ってここに戻って来るようにしなさい。

     Ng の他のコマンドと同様に、これらのコマンドには、繰り返しの回数を指定す
る引数を与えることができます。そのためには、コマンドを入力する前に、C-u に続
いて繰り返す回数を入力します。

     例えば、C-u 8 C-f とすると、８文字分先に移動します。

       >> C-n あるいは C-p に適当な引数を指定して、一回の移動でなるべくこの
          行の近くに来るようにしてみなさい。

     C-v や ESC v については少し違います。この場合、指定された数の行だけ画面
を移動することになります。

       >> C-u 3 C-v と入力してみなさい。

     元に戻るには、C-u 3 ESC v を使えばよいのです。

中止コマンド
============

     C-g というコマンドで、入力を必要とするようなコマンドを中止することがで
きます。例えば、引数を入力している途中や、２つ以上のキー入力を必要とするコマ
ンドを入力している最中に、それをやめたくなったら、C-g を使えば良いのです。

       >> C-u 100 をタイプして引数を１００に設定し、C-g をタイプしなさい。そ
          のあとで C-f をタイプしてみなさい。何文字移動しましたか？もし間違っ
          て ESC を入力してしまった時も、C-g を入力すれば取り消せます。

エラー
======

     時には、Ng で許されていない操作をしてしまうことがあります。例えば、コマ
ンドの定義されていないコントロール・キーを入力してしまった時には、Ng はベル
を鳴らし、さらに、画面の一番下に、何が悪かったかを表示します。

     Ng のバージョンによっては、この入門編に書かれていることを実行できない場
合があり得ます。その様な場合には、エラーメッセージが表示されますから、何かカー
ソル移動キーを押して、その次の部分に進んで下さい。

ウィンドウ
==========

     Ng は幾つものウィンドウを持つことと、そのそれぞれに対してテキストを表示
することができます。ヘルプや、幾つかのコマンドからの出力を表示するために現れ
た余分なウィンドウを消すために、次のコマンドを知る必要があります。

     C-x 1	ウィンドウを１つにする。

     C-x 1 は、他のウィンドウを消して、カーソルのあるウィンドウを、画面全体
に広げます。

       >> カーソルをこの行に持ってきて、C-u 0 C-l とタイプします。

       >> C-h a C-m とタイプしなさい。新しいウィンドウがコマンド一覧を表示す
          るために現れると同時に、このウィンドウがどのように縮むかを観察しな
          さい。(ただし、MS-DOS 版では <Del> a C-m とタイプする)

       >> C-x 1 とタイプして、ドキュメントの現われていたウィンドウを消しなさ
          い。

挿入と削除
==========

     テキストをタイプしたければ、単にそれをタイプするだけで構いません。目に
見える文字 ('A','7','*','あ'など) は Ng によってテキストであるとみなされ、そ
のまま挿入されます。行の終わりは改行文字で表され、これを入力するには 
<Return> をタイプします。

     直前に入力した文字を削除するには、<Delete> を入力します。<Delete> は、
キーボードで「Delete」と書いてあるキーを押して入力します。「Delete」のかわり
に「Rubout」と書いてあるかも知れません。より一般的には、<Delete> は、現在カー
ソルのある位置の直前の文字を削除します。(ただし、MS-DOS 版では <= や <BS> キー
等または C-h を入力する)

       >> 文字をいくつかタイプし、それからそれらを <Delete> を使って削除しな
          さい。

       >> 右マージンを越えるまでテキストをタイプしなさい。テキストが一行の幅
          以上に長くなると、その行だけ左にスクロールして「継続」されます。左
          端にある '$' 記号は、その行が継続されていることを表しています。Ng 
          は、現在編集中の位置が見えるように行をスクロールします。画面の右あ
          るいは左の端にある '$' 記号は、その方向に行がまだ続いていることを
          表しています。

     これは、文章で説明するより実際にやった方がよく判るでしょう。

       >> 先ほど入力した、継続された行の上にカーソルをもっていき、C-d でテキ
          ストを削除して、テキストが一行に収まるようにしてみなさい。継続を表
          す '$' 記号は消えましたね。

       >> カーソルを行の先頭に移動し、<Delete> を入力しなさい。これはその行
          の直前の行区切りを削除するので、その行が前の行とつながってしまいま
          す。つながった行が画面の幅より長くなると、継続の表示がされるでしょ
          う。

       >> <Return> を押して、もう一度行区切りを挿入しなさい。

     Ng のほとんどのコマンドは、繰り返しの回数を与えることができます。このこ
とは、文字の挿入についても当てはまります。

       >> C-u 8 * と入力してみなさい。どうなりましたか。

     二つの行の間に空白行を作りたい場合には、二番目の行の先頭に行き、C-o を
入力します。

       >> 適当な行の先頭に行き、そこで C-o を入力してみなさい。

     これで、Ng で、テキストを入力し、また間違いを修正するもっとも基本的な方
法を学んだことになります。文字と同じ様に、単語や行も削除することができます。
削除操作について要約すると次のようになります。

     <Delete>	  カーソルの直前の文字を削除 (MS-DOS 版では <=, <BS>, C-h 等)
     C-d	  カーソルの位置にある文字を削除

     ESC <Delete> カーソルの直前の単語を削除 (MS-DOS 版では ESC <= 等)
     ESC d	  カーソル位置以降にある単語を削除

     C-k	  カーソル位置から行末までを削除

     何かを削除した後で、それを元に戻したくなることがあります。Ng は、一文字
よりも大きい単位で削除を行った時には、削除した内容を保存しておきます。元に戻
すには、C-y を使います。注意したいのは、C-y を削除を行った場所だけではなく、
どこにでも出来ることです。C-y は、保存されたテキストを現在カーソルのある場所
に挿入するためのコマンドですから、これを使ってテキストの移動を行うことができ
ます。

     削除を行うコマンドには、"Delete" コマンドと、"Kill" コマンドとがありま
す。"Kill" コマンドでは削除されたものは保存されますが、"Delete" コマンドでは
保存されません。ただし、繰り返し回数が与えられると、保存されます。

      >> C-n を２回ほどタイプして、画面の適当な場所に移動しなさい。そして、
          C-k で、その行を削除しなさい。

     一回目の C-k でその行の内容が削除され、もう一度 C-k を入力すると、その
行自身が削除されます。もし、C-k に繰り返し回数を指定した場合には、その回数だ
けの行が (内容と行自身とが同時に) 削除されます。

     今削除されたテキストは、保存されているので、それを取り出すことができま
す。そのためには、C-y をタイプします。

       >> C-y を試してみなさい。

     C-k を何度も続けて行うと、削除されるテキストは、まとめて保存され、C-y 
で、その全てが取り出されます。

       >> C-k を何度もタイプしてみなさい。

       >> テキストを取り出すには、C-y です。カーソルを数行下に移動させ、もう
          一度 C-y をタイプしてみなさい。これでテキストのコピーができるわけ
          です。

     現在何かのテキストが保存されていて、さらに他のテキストを削除するとどう
なるでしょうか。C-y は、もっとも最近削除されたものを取り出します。


       >> 行を削除し、カーソルを移動させ、別の行を削除しなさい。C-y を行うと、
          ２番目の行が得られます。

取り消し (UNDO)
===============

     Ng は保存したテキストを取り出すこと以外には、実行したコマンドの取り消し
はできません。なるべく注意してコマンドを使いましょう。


ファイル
========

     テキストへの変更を永久的にするためには、それをファイルに保存しなければ
なりません。保存されないと、ほどこした変更は、Ng を終了すると同時に失われて
しまいます。

     いま見ているファイルに対して、あなたの編集を行ったものを書き込みます。
いま見ているファイルとは、簡単にいえば編集しているファイル自体のことです。

     あなたがファイルをセーブ (保存する) するまで、今までの変更は編集してい
るファイルに書き込まれる事はありません。それは、あなたがそのように行いたくな
いのに、途中まで変更を加えたものが勝手に書き込まれるような事がないようにです。

     セーブを行った後でさえ変更したものが間違っていた時のために Ng は名前を
変えてオリジナルのファイルを残します。

備考:		ただし、この機能が使えないようになっている場合もあります。

     画面の下の方を見ると、このような感じでモードラインが表示されていると思
います。


(例)  --**-Ng: Ng.tut                      (JJJ:fundamental)------------


     この Ng チュートリアルのコピーは Ng.tut と呼ばれています。ファイルをファ
インド (ファイルを見つけてバッファに読み込むこと) すると、Ng.tut の部分に表
示されます。例えば、new-file という名前のファイルをファインドしたならば、
"Ng: new-file" というモードラインになるでしょう。

注意:		モードラインについては後ほど説明します。少しお待ちを。

     ファイルをファインドしたり、セーブしたりするコマンドは、これまでのもの
とは違い、２つの文字からなっています。C-x に続いて入力する文字が、ファイルに
対して行う操作を表します。

     もう一つこれまでのものと違う点は、ファインドの時、ファイル名を Ng に問
われます。このことを、端末から引数を読み込んでくるコマンドと言っています。

注意:		この場合はファイル名です。

     C-x C-f	ファイルを見つける (ファインドする) 

     Ng はファイル名を聞いてきます。それは、画面の下の行に現れます。ファイル
名を指定している部分は、ミニバッファと呼ばれるものです。ミニバッファはこの様
な使われ方をします。ファイル名に続いて、リターンキーを押すと、ミニバッファに
表示されている内容はもう必要ではなくなるので消えてしまいます。

       >> C-x C-f とタイプした後に C-g とタイプして下さい。ミニバッファの内
          容を取り消し、また、C-x C-f コマンドも取り消します。と言う訳で、何
          もファイルを見つけるようなことはしません。

     今度はファイルをセーブしてみましょう。今までの変更を保存するためには次
のようなコマンドを使います。

     C-x C-s	ファイルをセーブする

     Ng の内容はファイルに書き出されます。セーブする時、オリジナルのファイル
は新しい名前をつけられて残されているので内容は失われません。その新しい名前は
オリジナルのファイルの名前に '~' をつけたものです。(MS-DOS 版では、拡張子が
".bak" になる。ただし、デフォルトではバックアップファイルは作られない)

     セーブが終わると、Ng はセーブしたファイルの名前を表示します。

       >> C-x C-s とタイプしてチュートリアルのコピーをセーブして下さい。その
          時、画面の下の方に "Wrote ...../Ng.tut" と表示されます。

     新しいファイルを作る時は、あたかも以前からあったファイルをファインドす
るようなフリをします。そうして、そのファインドしたファイルにタイプしていきま
す。

     ファイルをセーブしようとした時に初めて、Ng は今まで編集していた内容をファ
イルの中に書き込みます。


バッファ
========

     もし、２番目のファイルを C-x C-f で取り出すと、１番目のファイルは Ng 内
部に残ります。Ng 内部にある、ファイルからテキストを読み込んで保存しているも
のはバッファと呼ばれます。ファイルを取り出す時には、Ng 内部に新しいバッファ
が作られます。

     Ng の中に保存しているバッファのリストを見るには、次のようにタイプします。

     C-x C-b	(バッファリストの表示)

       >> C-x C-b とタイプしなさい。それぞれのバッファがどのように名前を持っ
          ているか、そして、どのようなファイル名をつけているのか観察しなさい。

     バッファにはファイルと一致ないものもあります。たとえば、"*Buffer List*" 
というファイルはありません。これは C-x C-b によって作られたバッファリストに
対してのバッファです。

     あなたが見ている Ng ウィンドウ内にあるどんなテキストも、いずれかのバッ
ファ内にあります。

       >> バッファリストを消すため C-x 1 とタイプしなさい。

     もし、あるファイルのテキストに変更を行なってから、他のファイルを取り出
したとしたら、最初のファイルはセーブされていません。その変更は Ng 内部のファ
イルと対応するバッファの中だけに行なわれています。

     ２番目のファイルに対応するバッファを作ったり、エディットしたりしても、
１番目のファイルに対応するバッファには何も影響を与えません。これはとても使い
易く、また、１番目のファイルに対応するバッファを取っておくために役に立つ方法
です。

     C-x C-s でバッファをセーブするために C-x C-f でバッファを切り替えるのは
厄介です。そこで次のコマンドを使います。

     C-x s	現在あるバッファをセーブする。

     C-x s は内容が変更された全てのバッファをファイルにセーブします。この時、
ひとつひとつの (セーブされるべき) バッファに対して、セーブするか、しないかを 
y か n で問われます。この表示は画面の下の行に表示されます。例えば、このよう
にです。

             Save file  /usr/private/yours/Ng.tut? (y or n)


コマンドの拡張
==============

     エディタには、コントロール・キーやメタ・キーで入力できるものよりもずっ
と多くのコマンドがあります。これらを扱うためには、拡張 (eXtend) コマンドを使
います。それには、以下の２つの種類があります。

     C-x	文字による拡張。続けて一文字を入力します。
     ESC x	名前による拡張。続けてコマンドの名前を入力します。

     これらは一般に、便利だけれども、これまで見てきたものほど頻繁には用いら
れないコマンドのためのものです。C-x C-f (ファインド) や C-x C-s (セーブ) は
この仲間です。他に、C-x C-c (エディタの終了) もそうです。

     C-z は Ng を抜けるのに良く使われる方法です。Ng を終了することなく、一旦、
csh のレベルに戻るには一番良い方法と言えるでしょう。C-z を行なわれても Ng は
ストップしているだけで、内容が破壊されるということはありません。

注意:		ただし X-window で行なっている場合、もしくは使用しているシェ
		ルが sh の時は、この限りではありません。


     C-x  コマンドは、たくさんあります。すでに学んだものは以下のものです。

     C-x C-f	ファイルの編集 (Find)。
     C-x C-s	ファイルの保存 (Save)。 
     C-x C-b	バッファリストの表示。
     C-x C-c	エディタを終了する。ファイルの保存は、自動的には行われません。
		しかし、もしファイルが変更されていれば、ファイルの保存をする
		のかどうかを聞いてきます。保存して終了する普通の方法は、C-x
		C-s C-x C-c とすることです。

     名前による拡張コマンドには、あまり使われないものや、特定のモードでしか
使わないものなどがあります。例として、"apropos" をとりあげます。このコマンド
はキーワードを入力させ、それにマッチする全てのコマンドの名前を表示します。
ESC x とタイプすると、スクリーンの下に "M-x" が表示されます。これに対して、
実行するコマンドの名前 (今の場合、"apropos") を入力します。"apr" まで入力し
た後スペースを入れれば、後の部分は自動的に補われます。この後、キーワードを聞
かれますから、知りたい文字列をタイプします。なお、キーワードを入れないと、全
てのコマンドが表示されます。

       >> ESC x をタイプし、続けて、"apropos<Return>" あるいは
          "apr<Space><Return>" とタイプします。次に、"kanji<Return>" とタイ
          プします。

     現れた「ウィンドウ」を消すには、C-x 1 とタイプします。

モードライン
============

     もしゆっくりとコマンドを打ったならば、画面の下底のエコーエリアと呼ばれ
る場所に打ったものが表示されます。エコーエリアは画面の一番下の行です。そのす
ぐ上の行は、モードラインと呼ばれています。モードラインはこんな風に表示されて
いるでしょう。

 --**-Ng: Ng.tut                      (JJJ:fundamental)------------


注意:		あなたが使っている Ng のモードラインと違うかも知れないけど、
		慌てないように。

     この行によって多くの有用な情報が得られます。

     左の方では、あなたが見ているファイル名を表示しています。また、その左が 
"-----Ng:" ではなく "--**-Ng:" になっている時は、そのバッファの内容が変更さ
れていることを示しています。

     モードラインの小括弧の中は、漢字コード体系に関するフラグの状態と、今ど
んなモードに入っているかを示しています。

     Ng は、ファイル入出力、キーボード入力、画面出力について、それぞれ独立に
漢字コードを指定させることが出来、小括弧の中の ":" の左の漢字コード体系に関
するフラグでその状態を表示します。

       >> モードライン上に "JJJ", "SSS", "EEE" か "'JSEN-'いずれかの組み合わ
          せ" が表示されているかどうか確認しなさい。

     "JJJ" は順に、ファイル入出力、キーボード入力、画面表示、の漢字コードを
示しており、J は JIS、S はシフト JIS、E は EUC、N は無変換、- は未定を意味し
ています。どの漢字コードを使用するかは、その表示によって表されます。

     漢字コードの切り替えは、Ng 全体に対して有効ですが、ファイル入出力につい
てはそれぞれのバッファについてのみ有効です。それぞれの漢字コードを変更するコ
マンドには、次のようなものがあります。

     C-x C-k f	ファイル入出力漢字コードを切り替える。
     C-x C-k i	キーボード入力漢字コードを切り替える。
     C-x C-k d	画面出力漢字コードを切り替える。

       >> C-x C-k f を数回繰り返して実行してみなさい。その時モードラインの 
          "JJJ" がどのように変わるかに注意しなさい。

     モードラインの小括弧の中の ":" の右は、今どんなモードに入っているかを示
しています。現在は、デフォルトの fundamental に入っています。

     Ng は幾つかのメジャーモードを持っています。どんな時でも必ずいずれかのメ
ジャーモードの状態になっています。それぞれのメジャーモードは幾つかのコマンド
を全く違う振る舞いにしてしまいます。


検索
=====

     ファイル内で、前方又は後方に、文字列を探す事ができます。検索を始めるコ
マンドは、カーソル位置以降を検索するならば C-s、カーソル位置以前ならば C-r 
です。C-s をタイプすると、エコーエリアに "I-search:" という文字列がプロンプ
トとして表示されます。ESC を押すと、終了できます。


       >> C-s で検索が始まります。それから、ゆっくりと１文字ずつ "cursor" と
          いう単語を入力します。１文字入力するごとに、カーソルは、どんな動き
          をしますか?

       >> もう１度 C-s をタイプすると、次の "cursor" を見つけられます。

       >> <Delete> を４回入力して、カーソルの動きを見なさい。

       >> ESC を押して、終了します。

     探したい文字列をタイプ中でも、タイプした文字部分だけで、検索を始めます。
次の文字を探すには、再び C-s をタイプします。もし、文字列が存在しなかったら、
メッセージが表示されます。C-g でも終了できます。

     検索実行中に <Delete> を入力すると、検索文字列の１番後ろの文字が消えま
す。そして、カーソルは、前回の位置に戻ります。たとえば、"cu" とタイプして、
最初の "cu" の位置にカーソルが動いたとします。ここで <Delete> を入力すると、
サーチラインの 'u' が消え、カーソルは、'u' をタイプする前に、カーソルがあっ
た 'c' の位置に、移動します。(ただし、MS-DOS 版では <=, <BS>, C-h 等になる)

     検索実行中に、C-s や C-r 以外のコントロール文字をタイプすると、検索は
終了します。

     C-s は、現在のカーソル位置以降に出てくる検索文字列を探します。もし、前
の方を探したかったら、C-r をタイプすることで、逆方向検索ができます。C-s と
C-r は、検索の方向が反対なだけで、全て同じ働きをします。


ヘルプ
======

     Ng には、たくさんの役に立つ機能があり、ここで、すべてを説明することは、
不可能です。しかし、まだ知らない多くの機能を学ぶためには、<HELP> と呼ばれる 
C-h をタイプすることで、おおまかな情報を手に入れることができます。(ただし、
MS-DOS 版では <Del> キーになる)

     使い方は、C-h をタイプし、続いて必要なオプションを１文字タイプします。
タイプできるのは a, b, c のいずれかです。もし、C-h をタイプしてから気が変わっ
たら、C-g をタイプすれば、取り消すことができます。

     最も基本的なものは、C-h c です。これに続いてキーを入力すると、そのコマ
ンドについての短い説明を表示します。

       >> C-h c C-p とタイプしてみなさい。"C-p runs the command previous-
          line" のようなメッセージが表示されるはずです。

     見たことはあるが、覚えてはいないコマンドも思い出せるのです。C-x C-s の
ような複数で１つのコマンドも C-h c の後ろに続けられます。

     他にも役に立つオプションがあります。

    C-h a	キーワードを入力すると、名前にそのキーワードを含む、全ての
		コマンドを表示します。これらのコマンドはすべてESC x で実行
		できます。

       >> C-h a file とタイプし、<Return> を押しなさい。名前に "file" という
          文字を持つ全てのコマンドを表示します。また、find-file や
          write-file という名の C-x C-f や C-x C-w のようなコマンドも表示さ
          れます。

    C-h b	キーに割り当てられている全てのコマンドの名前が表示されます。

       >> C-h b とタイプしなさい。


おわりに
========

忘れずに:	終了するには、C-x C-c とします。


     この入門編は、まったくの初心者にもわかりやすいようにと意図しています。
ですから、もし何かわかりにくい点があったなら、一人で愚痴を言うのではなく、文
句をつけて下さい。


     Ng は Nemacs と同じように使える、より軽いエディタです。Ng では Nemacs 
ほど強力な機能は使えませんが、基本的な使い方を覚えるにはちょうどよい教材になっ
ています。そして、もし Nemacs を何日かでも使ってみれば、それをやめてしまうこ
となどできなくなるでしょう。最初は戸惑うかも知れません。しかし、それはどんな
エディタでも同様です。Nemacs のように、非常に多くのことができる場合には特に
そうでしょう。そして、Nemacs では、実際、何でもできるのですから。



謝辞
=====
     この文書は、JUNET で流された "日本語 MicroEMACS (kemacs) 入門編" を GNU
Emacs (NEmacs) の Tutorial 用に書き換えたものを、さらに Ng 用に書き換えたも
のです。


     Jonathan Payne による "JOVE Tutorial" (19 January 86) を変更したもので
     あり、それはもともとは、CCA-UNIXのSteve Zimmerman によって変更された、
     MIT の "Teach-Emacs" 入門編 (31 October 85) を (さらに) 変更したもので
     した。

     Update - February 1986 by Dana Hoggatt.

     Update - December 1986 by Kim Leburg.

     Update/Translate - July 1987 by SANETO Takanori


GNU Emacs 版での「特別な謝辞」
==============================

     最初にこれの日本語訳を作られた、SANETO Takanoriさん。この文章はGMW +
Wnn  + NEmacsを使って書きました。そのような素晴らしいプログラムを作った方々
へ感謝の意を表したいと思います。翻訳とか、入力とかを色々と手伝ってくれた、
藤原祥子さん、どうもありがとう。


誤訳、嘘、その他、の文責は、以下の者にあります。

                        鈴木裕信 hironobu@sra.co.jp


Update/Add - December 1987 by Hironobu Suzuki
Update/Add   November 1989 by Ken'ichi Handa


Ng 版に当たってのさらなる謝辞
=============================

     大元の日本語版を作られた實藤隆則さん、GNU Emacs 版を作られた鈴木裕信さ
ん、そしてもちろん Nemacs の作者である半田剣一さん、「たまご」の作者の戸村哲
さん、に感謝します。また、このドキュメントを作成することのできる、様々な環境
を実現してくれた先人達に感謝します。


Ng 版での文責は、以下の者にあります。

			吉田茂樹 shige@csk.CO.JP


Update - February 1990 by Shigeki Yoshida
Update - January 1991 by Shigeki Yoshida

