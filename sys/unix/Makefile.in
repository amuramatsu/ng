# $Id: Makefile.in,v 1.8.2.4 2006/04/01 14:39:35 amura Exp $
# Makefile.in for Ng / Mg++
#
# Create from BSD Makefile by MURAMATSU Atsushi

SYS	= unix

CC	     = @CC@
LN_S         = @LN_S@
STRIP        = @STRIP@
PERL         = @PERL@
INSTALL      = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@

prefix      = @prefix@
exec_prefix = @exec_prefix@
BINDIR      = @bindir@
SHAREDIR    = @datadir@/ng

# CDEFS gets defines, and gets passed to lint. CFLAGS gets flags, and doesn't
# get passed to lint.
#
# Now, compile time options are defined in a "config.h".
#
CDEFS	= @DEFS@
CFLAGS	= @CFLAGS@ $(CDEFS)
LDFLAGS = @LDFLAGS@
LIBS	= @LIBS@

# If your machine don't have an alloca(), please define ALLOCA.
ALLOCA	= @ALLOCA@

# Objects which only depend on the "standard" includes
OBJS	= autosave.o basic.o dir.o dired.o shell.o version.o window.o \
	  kinsoku.o jump.o

# Those with unique requirements
IND	= buffer.o complt.o display.o cmode.o echo.o extend.o file.o \
	  help.o kbd.o keymap.o line.o macro.o main.o match.o modes.o \
	  paragraph.o random.o region.o regex.o re_search.o search.o \
	  skg.o kanji.o undo.o word.o unicode.o lang.o lang_ascii.o

# System dependent objects
OOBJS = cinfo.o spawn.o ttyio.o tty.o ttykbd.o in_code.o lstring.o

OBJ = $(OBJS) $(IND) $(OOBJS) fileio.o canna.o $(ALLOCA)

OSRCS	= cinfo.c fileio.c spawn.c ttyio.c tty.c ttykbd.c canna.c alloca.c \
	  unicode.c in_code.c lstring.c
LSRCS	= lang_ascii.c
SRCS	= basic.c cmode.c dir.c dired.c file.c line.c match.c paragraph.c \
	  random.c region.c search.c shell.c version.c window.c word.c \
	  buffer.c complt.c display.c echo.c extend.c help.c kbd.c \
	  keymap.c macro.c main.c modes.c regex.c re_search.c kanji.c \
	  kinsoku.c skg.c jump.c undo.c lang.c

OINCS =	ttydef.h sysdef.h chrdef.h
INCS =	config.h def.h sysconfig.h extern.h lstring.h
REINCS = trex.h trex.c

#PROG = mg
PROG = ng

$(PROG):	$(OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(PROG) $(OBJ) $(LIBS)

# strip mg once you're satisfied it'll run -- makes it much smaller
strip:
	$(STRIP) $(PROG)

install:
	$(INSTALL) -m 755 -o root -g wheel $(PROG) $(BINDIR)
	mkdir $(SHAREDIR)
	$(INSTALL_DATA) -o root -g wheel docs/* $(SHAREDIR)
	$(INSTALL_DATA) -o root -g wheel bin/* $(SHAREDIR)

lint: $(SRCS) $(OSRCS) $(LSRCS) $(INCS) $(OINCS)
	lint -ahbz $(CDEFS) $(SRCS) $(LSRCS) $(OSRCS)

sysconfig.h:
	./configure

$(OBJ):		$(INCS) $(OINCS)

$(OOBJS):	$(INCS) $(OINCS)

buffer.o: 	$(INCS) $(OINCS) kbd.h undo.h

cmode.o file.o line.o paragraph.o random.o region.o undo.o word.o: \
		$(INCS) $(OINCS) undo.h

complt.o:	$(INCS) $(OINCS) kbd.h complt.h

display.o keymap.o modes.o fileio.o: \
		$(INCS) $(OINCS) kbd.h

echo.o:		$(INCS) $(OINCS) key.h macro.h complt.h

extend.o help.o: \
		$(INCS) $(OINCS) kbd.h macro.h key.h

kanji.o:	$(INCS) $(OINCS) kinit.h kanji.h

kbd.o:		$(INCS) $(OINCS) kbd.h macro.h key.h undo.h

macro.o canna.o: \
		$(INCS) $(OINCS) macro.h key.h

main.o search.o: \
		$(INCS) $(OINCS) macro.h

match.o:	$(INCS) $(OINCS) key.h

re_search.o:	$(INCS) $(OINCS) $(REINCS) macro.h

regex.o:	$(INCS) $(OINCS) $(REINCS)

skg.o: 		$(INCS) $(OINCS) macro.h key.h undo.h

unicode.o:	$(INCS) $(OINCS) kanji.h

lang.o:		$(INCS) $(OINCS) langlist.h

sysdef.h:	sys/$(SYS)/sysdef.h	# Update links, if needed.
	rm -f sysdef.h
	$(LN_S) sys/$(SYS)/sysdef.h .

ttydef.h:	sys/default/ttydef.h
	rm -f ttydef.h
	$(LN_S) sys/default/ttydef.h .

chrdef.h:	sys/default/chrdef.h
	rm -f chrdef.h
	$(LN_S) sys/default/chrdef.h .

fileio.c:	sys/$(SYS)/fileio.c
	rm -f fileio.c
	$(LN_S) sys/$(SYS)/fileio.c .

spawn.c:	sys/$(SYS)/spawn.c
	rm -f spawn.c
	$(LN_S) sys/$(SYS)/spawn.c .

tty.c:		sys/default/tty.c
	rm -f tty.c
	$(LN_S) sys/default/tty.c .

ttyio.c:	sys/$(SYS)/ttyio.c
	rm -f ttyio.c
	$(LN_S) sys/$(SYS)/ttyio.c .

canna.c:	sys/$(SYS)/canna.c
	rm -f canna.c
	$(LN_S) sys/$(SYS)/canna.c .

ttykbd.c:	sys/default/ttykbd.c
	rm -f ttykbd.c
	$(LN_S) sys/default/ttykbd.c .

cinfo.c:	sys/default/cinfo.c
	rm -f cinfo.c
	$(LN_S) sys/default/cinfo.c .

alloca.c:	sys/default/alloca.c
	rm -f alloca.c
	$(LN_S) sys/default/alloca.c .

unicode.c:	sys/unix/unicode.c
	rm -f unicode.c
	$(LN_S) sys/$(SYS)/unicode.c .

in_code.c:	sys/default/in_code.c
	rm -f in_code.c
	$(LN_S) sys/default/in_code.c .

lstring.c:	sys/default/lstring.c
	rm -f lstring.c
	$(LN_S) sys/default/lstring.c .

lstring.h:	sys/default/lstring.h
	rm -f lstring.h
	$(LN_S) sys/default/lstring.h .

langlist.h:	$(LSRCS) make_langlist.pl
	$(PERL) make_langlist.pl $(LSRCS) > langlist.h

clean:;	rm -f $(OBJ) $(OSRCS) $(OINCS) $(PROG)

clobber:	clean
	rm -f config.log config.cache config.status sysconfig.h Makefile
